// Code generated by protoc-gen-go. DO NOT EDIT.
// source: structs.proto

/*
Package vivaldi is a generated protocol buffer package.

It is generated from these files:
	structs.proto

It has these top-level messages:
	Coordinate
*/
package vivaldi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Coordinate is a specialized structure for holding network coordinates for the
// Vivaldi-based coordinate mapping algorithm. All of the fields should be public
// to enable this to be serialized. All values in here are in units of seconds.
type Coordinate struct {
	// Vec is the Euclidean portion of the coordinate. This is used along
	// with the other fields to provide an overall distance estimate. The
	// units here are seconds.
	Vec []float64 `protobuf:"fixed64,1,rep,packed,name=Vec" json:"Vec,omitempty"`
	// Err reflects the confidence in the given coordinate and is updated
	// dynamically by the Vivaldi Client. This is dimensionless.
	Error float64 `protobuf:"fixed64,2,opt,name=Error" json:"Error,omitempty"`
	// Adjustment is a distance offset computed based on a calculation over
	// observations from all other nodes over a fixed window and is updated
	// dynamically by the Vivaldi Client. The units here are seconds.
	Adjustment float64 `protobuf:"fixed64,3,opt,name=Adjustment" json:"Adjustment,omitempty"`
	// Height is a distance offset that accounts for non-Euclidean effects
	// which model the access links from nodes to the core Internet. The access
	// links are usually set by bandwidth and congestion, and the core links
	// usually follow distance based on geography.
	Height float64 `protobuf:"fixed64,4,opt,name=Height" json:"Height,omitempty"`
}

func (m *Coordinate) Reset()                    { *m = Coordinate{} }
func (m *Coordinate) String() string            { return proto.CompactTextString(m) }
func (*Coordinate) ProtoMessage()               {}
func (*Coordinate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Coordinate) GetVec() []float64 {
	if m != nil {
		return m.Vec
	}
	return nil
}

func (m *Coordinate) GetError() float64 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *Coordinate) GetAdjustment() float64 {
	if m != nil {
		return m.Adjustment
	}
	return 0
}

func (m *Coordinate) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*Coordinate)(nil), "vivaldi.Coordinate")
}

func init() { proto.RegisterFile("structs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x29, 0x2a,
	0x4d, 0x2e, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0xcb, 0x2c, 0x4b, 0xcc,
	0x49, 0xc9, 0x54, 0xca, 0xe1, 0xe2, 0x72, 0xce, 0xcf, 0x2f, 0x4a, 0xc9, 0xcc, 0x4b, 0x2c, 0x49,
	0x15, 0x12, 0xe0, 0x62, 0x0e, 0x4b, 0x4d, 0x96, 0x60, 0x54, 0x60, 0xd6, 0x60, 0x0c, 0x02, 0x31,
	0x85, 0x44, 0xb8, 0x58, 0x5d, 0x8b, 0x8a, 0xf2, 0x8b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x18, 0x83,
	0x20, 0x1c, 0x21, 0x39, 0x2e, 0x2e, 0xc7, 0x94, 0xac, 0xd2, 0xe2, 0x92, 0xdc, 0xd4, 0xbc, 0x12,
	0x09, 0x66, 0xb0, 0x14, 0x92, 0x88, 0x90, 0x18, 0x17, 0x9b, 0x47, 0x6a, 0x66, 0x7a, 0x46, 0x89,
	0x04, 0x0b, 0x58, 0x0e, 0xca, 0x4b, 0x62, 0x03, 0xdb, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xcb, 0xc6, 0x0f, 0xbd, 0x8e, 0x00, 0x00, 0x00,
}
